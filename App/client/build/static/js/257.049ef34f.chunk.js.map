{"version":3,"file":"static/js/257.049ef34f.chunk.js","mappings":"8IA0BA,IAtBoB,SAACA,GASnB,OACE,0BACE,SAAC,YAAY,CACXC,KAAK,OACLC,UAAU,cACVC,OAAO,UACPC,SAAU,SAACC,GAAC,OAdC,SAACA,GAClB,IAAIC,EAAW,IAAIC,SACnBD,EAASE,OAAO,OAAQH,EAAEI,OAAOC,MAAM,IACvCC,EAAAA,GAAAA,KAAW,yBAA0BL,GAAUM,MAAK,SAACC,GACnDb,EAAMc,SAASD,EAASE,KAAKC,SAC/B,GACF,CAQuBC,CAAWZ,EAAE,KAKtC,C,gHC4DA,UA7Ee,SAACL,GACd,IAAIkB,GAAWC,EAAAA,EAAAA,MACTC,GAAOC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMF,IAAI,IAE9C,GAA0BG,EAAAA,EAAAA,UAAS,IAAG,eAA/BC,EAAK,KAAEC,EAAQ,KACtB,GAA8BF,EAAAA,EAAAA,UAAS,IAAG,eAAnCG,EAAO,KAAEC,EAAU,KAC1B,GAA0BJ,EAAAA,EAAAA,UAAS,IAAG,eAA/BK,EAAK,KAAEd,EAAQ,MAEtBe,EAAAA,EAAAA,YAAU,WACHT,EAAKU,cACRC,MAAM,gHACNb,EAAS,UAEb,GAAG,IAgCH,OACE,SAAC,KAAS,WACR,UAAC,KAAU,YACT,iBAAKhB,UAAU,cAAa,WAC1B,kBAAO8B,QAAQ,QAAO,2BACtB,kBACEC,GAAG,QACHhC,KAAK,OACLiC,MAAOV,EACPpB,SAAU,SAACC,GACToB,EAASpB,EAAE8B,cAAcD,MAC3B,QAGJ,SAAC,IAAW,CAACpB,SAAUA,KACvB,kBAAOkB,QAAQ,UAAS,2BACxB,qBACEC,GAAG,UACHhC,KAAK,OACLiC,MAAOR,EACPtB,SAAU,SAACC,GACTsB,EAAWtB,EAAE8B,cAAcD,MAC7B,KAEF,SAAC,KAAe,WACd,mBAAQE,QAAS,SAAC/B,GAAC,OAvDV,SAACA,GAIhB,GAHAA,EAAEgC,iBAGY,KAAVb,GAA4B,KAAZE,EAClB,OAAOK,MAAM,mEAGf,IAAIO,EAAO,CACTd,MAAAA,EACAE,QAAAA,EACAE,MAAAA,EACAW,IAAKnB,EAAKmB,KAGZ5B,EAAAA,GAAAA,KACQ,mBAAoB2B,GACzB1B,MAAK,SAACC,GACDA,EAASE,KAAKyB,SAChBT,MAAM,yEACNb,EAAS,MAETa,MAAM,wEAEV,IACCU,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACd,GACJ,CA2BgCG,CAASxC,EAAE,EAAC,4CAK9C,C,oIChFMyC,EAAYC,EAAAA,EAAAA,IAAU,2IAUtBC,EAAaD,EAAAA,EAAAA,KAAW,i1CAgExBE,EAAkBF,EAAAA,EAAAA,IAAU,yhB","sources":["components/post/Upload/ImageUpload.js","components/post/Upload/Upload.js","components/post/Upload/UploadCSS.js"],"sourcesContent":["import React from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport axios from \"axios\";\n\nconst ImageUpload = (props) => {\n  const FileUpload = (e) => {\n    var formData = new FormData();\n    formData.append(\"file\", e.target.files[0]);\n    axios.post(\"/api/post/image/upload\", formData).then((response) => {\n      props.setImage(response.data.filePath);\n    });\n  };\n\n  return (\n    <div>\n      <Form.Control\n        type=\"file\"\n        className=\"shadow-none\"\n        accept=\"image/*\"\n        onChange={(e) => FileUpload(e)}\n      />\n      {/* accept 속성: 어떤 유형의 파일을 input 태그로 관리할지 지정 가능  */}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport ImageUpload from \"./ImageUpload.js\";\nimport { UploadDiv, UploadForm, UploadButtonDiv } from \"./UploadCSS.js\";\nimport axios from \"axios\";\n\nconst Upload = (props) => {\n  let navigate = useNavigate();\n  const user = useSelector((state) => state.user);\n\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n\n  useEffect(() => {\n    if (!user.accessToken) {\n      alert(\"로그인한 회원만 글을 작성할 수 있습니다.\");\n      navigate(\"/login\");\n    }\n  }, []);\n\n  const onSubmit = (e) => {\n    e.preventDefault(); // 버튼 클릭시 기본 동작인 새로고침이 발생하는데 이를 막기 위한 용도\n    // 새로고침이 발생해서 아래 코드들이 무시가 되어 버리므로 코드 추가해주기\n\n    if (title === \"\" || content === \"\") {\n      return alert(\"모든 항목을 채워주세요!\");\n    }\n\n    let body = {\n      title,\n      content,\n      image,\n      uid: user.uid,\n    };\n\n    axios\n      .post(\"/api/post/submit\", body)\n      .then((response) => {\n        if (response.data.success) {\n          alert(\"글 작성이 완료되었습니다.\");\n          navigate(\"/\");\n        } else {\n          alert(\"글 작성에 실패하였습니다.\");\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <UploadDiv>\n      <UploadForm>\n        <div className=\"title-style\">\n          <label htmlFor=\"title\">제목</label>\n          <input\n            id=\"title\"\n            type=\"text\"\n            value={title}\n            onChange={(e) => {\n              setTitle(e.currentTarget.value);\n            }}\n          />\n        </div>\n        <ImageUpload setImage={setImage} />\n        <label htmlFor=\"content\">내용</label>\n        <textarea\n          id=\"content\"\n          type=\"text\"\n          value={content}\n          onChange={(e) => {\n            setContent(e.currentTarget.value);\n          }}\n        />\n        <UploadButtonDiv>\n          <button onClick={(e) => onSubmit(e)}>등록하기</button>\n        </UploadButtonDiv>\n      </UploadForm>\n    </UploadDiv>\n  );\n};\n\nexport default Upload;\n","import styled from \"@emotion/styled\";\n\nconst UploadDiv = styled.div`\n  max-width: 850px;\n  margin: 0 auto;\n  padding: 2rem 0;\n\n  @media (max-width: 850px) {\n    width: 90%;\n  }\n`;\n\nconst UploadForm = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  label {\n    font-weight: bold;\n    margin: 20px 0 10px;\n    color: white;\n  }\n\n  .title-style {\n    width: 100%;\n\n    #title {\n      width: 96.4%;\n      margin-left: 10px;\n      border-radius: 7px;\n      border: none;\n      padding: 5px 10px;\n      margin-bottom: 10px;\n      box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px,\n        rgba(0, 0, 0, 0.3) 0px 30px 60px -30px,\n        rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;\n\n      &:active,\n      &:focus {\n        outline: none;\n      }\n    }\n  }\n\n  textarea {\n    min-height: 350px;\n    resize: none;\n    border-radius: 10px;\n    border: 1px solid #c6c6c6;\n    padding: 10px;\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px,\n      rgba(0, 0, 0, 0.3) 0px 30px 60px -30px,\n      rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;\n\n    &:active,\n    &:focus {\n      outline: none;\n    }\n\n    &::-webkit-scrollbar {\n      width: 10px;\n    }\n    &::-webkit-scrollbar-thumb {\n      background-color: gray;\n      border-radius: 15px;\n      background-clip: padding-box;\n      border: 2px solid transparent;\n    }\n\n    &::-webkit-scrollbar-track {\n      background-color: #c6c6c6;\n      border-radius: 15px;\n      box-shadow: inset 0px 0px 5px whitesmoke;\n    }\n  }\n`;\n\nconst UploadButtonDiv = styled.div`\n  margin-top: 10px;\n  display: flex;\n  justify-content: flex-end;\n  gap: 10px;\n\n  button {\n    max-width: 850px;\n    margin: 1rem 0 3rem 0;\n    border-radius: 20px;\n    padding: 10px;\n    border: none;\n    background-color: #50577a;\n    color: white;\n    font-weight: bold;\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px,\n      rgba(0, 0, 0, 0.3) 0px 30px 60px -30px,\n      rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;\n\n    &:hover {\n      background-color: #414763;\n    }\n  }\n`;\n\nexport { UploadDiv, UploadForm, UploadButtonDiv };\n"],"names":["props","type","className","accept","onChange","e","formData","FormData","append","target","files","axios","then","response","setImage","data","filePath","FileUpload","navigate","useNavigate","user","useSelector","state","useState","title","setTitle","content","setContent","image","useEffect","accessToken","alert","htmlFor","id","value","currentTarget","onClick","preventDefault","body","uid","success","catch","err","console","log","onSubmit","UploadDiv","styled","UploadForm","UploadButtonDiv"],"sourceRoot":""}