{"version":3,"file":"static/js/404.878aa8b9.chunk.js","mappings":"0JAgBA,EAbcA,IAAAA,MAAW,CACvBC,OAAO,EACPC,SAAU,MACVC,mBAAmB,EACnBC,MAAO,IACPC,kBAAkB,EAClBC,MAAO,QACPC,QAAS,SAACN,GACRA,EAAMO,iBAAiB,aAAcR,IAAAA,WACrCC,EAAMO,iBAAiB,aAAcR,IAAAA,YACvC,G,gECkBF,IAvBoB,SAACS,GAUnB,OACE,0BACE,SAAC,YAAY,CACXC,KAAK,OACLC,UAAU,cACVC,OAAO,UACPC,SAAU,SAACC,GAAsC,OAfpC,SAACA,GAA4C,IAAD,EACvDC,EAAgB,IAAIC,SAClB,OAARD,QAAQ,IAARA,GAAAA,EAAUE,OAAO,OAAsB,QAAhB,EAAEH,EAAEI,OAAOC,aAAK,aAAd,EAAiB,IAE1CC,EAAAA,EAAAA,KAAW,yBAA0BL,GAAUM,MAAK,SAACC,GACnDb,EAAMc,SAASD,EAASE,KAAKC,SAC/B,GACF,CAQ4DC,CAAWZ,EAAE,KAK3E,C,yHCqEA,UAzFe,WACb,IAAMa,GAAWC,EAAAA,EAAAA,MACXC,GAAOC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMF,IAAI,IAEzD,GAA0BG,EAAAA,EAAAA,UAAS,IAAG,eAA/BC,EAAK,KAAEC,EAAQ,KACtB,GAA8BF,EAAAA,EAAAA,UAAS,IAAG,eAAnCG,EAAO,KAAEC,EAAU,KAC1B,GAA0BJ,EAAAA,EAAAA,UAAS,IAAG,eAA/BK,EAAK,KAAEd,EAAQ,MAEtBe,EAAAA,EAAAA,YAAU,WACHT,EAAKU,aACRC,EAAAA,EAAAA,KAAW,CACTC,KAAM,UACNC,KAAM,iHACLrB,MAAK,WACNM,EAAS,SACX,GAEJ,GAAG,IAyCH,OACE,SAAC,KAAS,WACR,UAAC,KAAU,YACT,iBAAKhB,UAAU,cAAa,WAC1B,kBAAOgC,QAAQ,QAAO,2BACtB,kBACEC,GAAG,QACHlC,KAAK,OACLmC,MAAOZ,EACPpB,SAAU,SAACC,GACToB,EAASpB,EAAEgC,cAAcD,MAC3B,QAGJ,SAAC,IAAW,CAACtB,SAAUA,KACvB,kBAAOoB,QAAQ,UAAS,2BACxB,qBACEC,GAAG,UACHC,MAAOV,EACPtB,SAAU,SAACC,GACTsB,EAAWtB,EAAEgC,cAAcD,MAC7B,KAEF,SAAC,KAAe,WACd,mBAAQE,QAAS,SAACjC,GAAC,OA/DV,SAACA,GAGhB,GAFAA,EAAEkC,iBAEY,KAAVf,GAA4B,KAAZE,EAClB,OAAOK,EAAAA,EAAAA,KAAW,CAChBC,KAAM,UACNC,KAAM,oEAIV,IAAMO,EAAO,CACXhB,MAAAA,EACAE,QAAAA,EACAE,MAAAA,EACAa,IAAKrB,EAAKqB,KAGZ9B,EAAAA,EAAAA,KACQ,mBAAoB6B,GACzB5B,MAAK,SAACC,GACDA,EAASE,KAAK2B,QAChBX,EAAAA,EAAAA,KAAW,CACTC,KAAM,UACNC,KAAM,0EACLrB,MAAK,WACNM,EAAS,IACX,IAEAa,EAAAA,EAAAA,KAAW,CACTC,KAAM,QACNC,KAAM,yEAGZ,IACCU,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACd,GACJ,CA0BgCG,CAAS1C,EAAE,EAAC,4CAK9C,C,oIC9FM2C,EAAYC,EAAAA,EAAAA,IAAU,2IAUtBC,EAAaD,EAAAA,EAAAA,KAAW,i1CAgExBE,EAAkBF,EAAAA,EAAAA,IAAU,yhB","sources":["components/UI/Toast/Toast.ts","components/post/Upload/ImageUpload.tsx","components/post/Upload/Upload.tsx","components/post/Upload/UploadCSS.ts"],"sourcesContent":["import Swal from \"sweetalert2\";\nimport \"../Toast/Toast.css\";\n\nconst Toast = Swal.mixin({\n  toast: true,\n  position: \"top\",\n  showConfirmButton: false,\n  timer: 2000,\n  timerProgressBar: true,\n  width: \"370px\",\n  didOpen: (toast) => {\n    toast.addEventListener(\"mouseenter\", Swal.stopTimer);\n    toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\n  },\n});\n\nexport default Toast;\n","import React from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport axios from \"axios\";\n\ntype Props = {\n  setImage: (data: string) => void;\n};\n\nconst ImageUpload = (props: Props) => {\n  const FileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const formData: any = new FormData();\n    formData?.append(\"file\", e.target.files?.[0]);\n\n    axios.post(\"/api/post/image/upload\", formData).then((response) => {\n      props.setImage(response.data.filePath);\n    });\n  };\n\n  return (\n    <div>\n      <Form.Control\n        type=\"file\"\n        className=\"shadow-none\"\n        accept=\"image/*\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => FileUpload(e)}\n      />\n      {/* accept 속성: 어떤 유형의 파일을 input 태그로 관리할지 지정 가능  */}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport ImageUpload from \"./ImageUpload\";\nimport { UploadDiv, UploadForm, UploadButtonDiv } from \"./UploadCSS\";\nimport axios from \"axios\";\nimport { RootState } from \"../../../reducer/store\";\nimport Toast from \"../../UI/Toast/Toast\";\n\nconst Upload = () => {\n  const navigate = useNavigate();\n  const user = useSelector((state: RootState) => state.user);\n\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n\n  useEffect(() => {\n    if (!user.accessToken) {\n      Toast.fire({\n        icon: \"warning\",\n        text: \"로그인한 회원만 글을 작성할 수 있습니다.\",\n      }).then(() => {\n        navigate(\"/login\");\n      });\n    }\n  }, []);\n\n  const onSubmit = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault(); // 버튼 클릭시 기본 동작인 새로고침이 발생하는데 이를 막기 위한 용도\n\n    if (title === \"\" || content === \"\") {\n      return Toast.fire({\n        icon: \"warning\",\n        text: \"모든 항목을 채워주세요!\",\n      });\n    }\n\n    const body = {\n      title,\n      content,\n      image,\n      uid: user.uid,\n    };\n\n    axios\n      .post(\"/api/post/submit\", body)\n      .then((response) => {\n        if (response.data.success) {\n          Toast.fire({\n            icon: \"success\",\n            text: \"글 작성이 완료되었습니다.\",\n          }).then(() => {\n            navigate(\"/\");\n          });\n        } else {\n          Toast.fire({\n            icon: \"error\",\n            text: \"글 작성에 실패하였습니다.\",\n          });\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <UploadDiv>\n      <UploadForm>\n        <div className=\"title-style\">\n          <label htmlFor=\"title\">제목</label>\n          <input\n            id=\"title\"\n            type=\"text\"\n            value={title}\n            onChange={(e) => {\n              setTitle(e.currentTarget.value);\n            }}\n          />\n        </div>\n        <ImageUpload setImage={setImage} />\n        <label htmlFor=\"content\">내용</label>\n        <textarea\n          id=\"content\"\n          value={content}\n          onChange={(e) => {\n            setContent(e.currentTarget.value);\n          }}\n        />\n        <UploadButtonDiv>\n          <button onClick={(e) => onSubmit(e)}>등록하기</button>\n        </UploadButtonDiv>\n      </UploadForm>\n    </UploadDiv>\n  );\n};\n\nexport default Upload;\n","import styled from \"@emotion/styled\";\n\nconst UploadDiv = styled.div`\n  max-width: 850px;\n  margin: 0 auto;\n  padding: 2rem 0;\n\n  @media (max-width: 850px) {\n    width: 90%;\n  }\n`;\n\nconst UploadForm = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  label {\n    font-weight: bold;\n    margin: 20px 0 10px;\n    color: white;\n  }\n\n  .title-style {\n    width: 100%;\n\n    #title {\n      width: 96.4%;\n      margin-left: 10px;\n      border-radius: 7px;\n      border: none;\n      padding: 5px 10px;\n      margin-bottom: 10px;\n      box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px,\n        rgba(0, 0, 0, 0.3) 0px 30px 60px -30px,\n        rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;\n\n      &:active,\n      &:focus {\n        outline: none;\n      }\n    }\n  }\n\n  textarea {\n    min-height: 350px;\n    resize: none;\n    border-radius: 10px;\n    border: 1px solid #c6c6c6;\n    padding: 10px;\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px,\n      rgba(0, 0, 0, 0.3) 0px 30px 60px -30px,\n      rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;\n\n    &:active,\n    &:focus {\n      outline: none;\n    }\n\n    &::-webkit-scrollbar {\n      width: 10px;\n    }\n    &::-webkit-scrollbar-thumb {\n      background-color: gray;\n      border-radius: 15px;\n      background-clip: padding-box;\n      border: 2px solid transparent;\n    }\n\n    &::-webkit-scrollbar-track {\n      background-color: #c6c6c6;\n      border-radius: 15px;\n      box-shadow: inset 0px 0px 5px whitesmoke;\n    }\n  }\n`;\n\nconst UploadButtonDiv = styled.div`\n  margin-top: 10px;\n  display: flex;\n  justify-content: flex-end;\n  gap: 10px;\n\n  button {\n    max-width: 850px;\n    margin: 1rem 0 3rem 0;\n    border-radius: 20px;\n    padding: 10px;\n    border: none;\n    background-color: #50577a;\n    color: white;\n    font-weight: bold;\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px,\n      rgba(0, 0, 0, 0.3) 0px 30px 60px -30px,\n      rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;\n\n    &:hover {\n      background-color: #414763;\n    }\n  }\n`;\n\nexport { UploadDiv, UploadForm, UploadButtonDiv };\n"],"names":["Swal","toast","position","showConfirmButton","timer","timerProgressBar","width","didOpen","addEventListener","props","type","className","accept","onChange","e","formData","FormData","append","target","files","axios","then","response","setImage","data","filePath","FileUpload","navigate","useNavigate","user","useSelector","state","useState","title","setTitle","content","setContent","image","useEffect","accessToken","Toast","icon","text","htmlFor","id","value","currentTarget","onClick","preventDefault","body","uid","success","catch","err","console","log","onSubmit","UploadDiv","styled","UploadForm","UploadButtonDiv"],"sourceRoot":""}